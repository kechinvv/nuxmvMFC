-- МФЦ обслуживает клиентов. В зале 5  мест для ожидания, приходящий клиент занимает свободное место (если есть) или уходит. Всего имеется N окон обслуживания. Каждый клиент обслуживается 1-3 минуты. 
-- Когда окно освободилось, вызывается очередной клиент по одной из следующих процедур:
    -- случайный из ожидающих
    -- первый в очереди
-- У клиента есть запас терпения K минут, после которого он пишет жалобу.

-- Проверки (проводятся для разных алгоритмов обработки очередей и разных значениях N):
    -- клиенты никогда не напишут жалобы
    -- пришедший раньше начнет обслуживаться раньше

MODULE main
  VAR
	queue: 0..5; 		-- свободных мест в очереди
    order: array 0..4 of 0..4;  -- порядок в очереди
	freeWindows: 0..3;  	-- количество свободных окон (to N)
    serving : array 0..3-1 of 0..3; -- время обслуживания в окне (to N-1)
    iteratedWindows: boolean;
    freeWindowIndexes: array 0..4 of 0..3-1; --потенциальные окна для очереди (of 0..N-1)
	place1: process QueuePlace(queue, freeWindows, order, 0, freeWindowIndexes, iteratedWindows, serving);	
    place2: process QueuePlace(queue, freeWindows, order, 1, freeWindowIndexes, iteratedWindows, serving);	
	place3: process QueuePlace(queue, freeWindows, order, 2, freeWindowIndexes, iteratedWindows, serving);	
	place4: process QueuePlace(queue, freeWindows, order, 3, freeWindowIndexes, iteratedWindows, serving);	
	place5: process QueuePlace(queue, freeWindows, order, 4, freeWindowIndexes, iteratedWindows, serving);
    winsLoop: process Windows(freeWindows, freeWindowIndexes, iteratedWindows, serving);
  DEFINE

  ASSIGN
	
	
-- клиенты никогда не напишут жалобы
  CTLSPEC 
	AG(place1.state != COMPLAINT & place2.state != COMPLAINT & place3.state != COMPLAINT & place4.state != COMPLAINT & place5.state != COMPLAINT);


-- пришедший раньше начнет обслуживаться раньше
  CTLSPEC 
	AG(order[0] < order[1] -> AF (place1.state = FREE & place2.state = WAIT));



MODULE QueuePlace(queue, freeWindows, order, i, freeWindowIndexes, iteratedWindows, serving)
  VAR
    state: {FREE, WAIT, COMPLAINT, OUT};
    income: 0..1;
    patience: 0..5; -- K
  ASSIGN
    init(state) := FREE;
    init(income) := 0..1;  
    init(patience) := 5;  --K

    next(income) := 0..1; -- случайное событие прихода клиента 50/50

    next(state) := 
      case
        (iteratedWindows = FALSE)                               : state;        --если идет перебор списка, то ждем ничего не делаем (как и везде далее)
        (state = FREE & income = 1)                             : WAIT;         --если пришел и место свободно - занимает очередь
        (state = WAIT & freeWindows > 0 & order[i] = 0)	        : FREE;         --если ждал и настала его очередь - место освобождается
        (state = WAIT & freeWindows = 0 & patience = 0)	        : COMPLAINT;    --если ждал и кончилось терпение - пишет жалобу
        (state = COMPLAINT & freeWindows = 0)	  			    : WAIT;         --если написал жалобу и нет окон, то ждет дальше
        (state = COMPLAINT & freeWindows > 0 & order[i] = 0)	: FREE;         --если написал жалобу и есть окна, то место освобождается
        TRUE 							                        : state;
      esac;

    -- уменьшаем терпение пользователя
    next(patience) := 
        case
            (iteratedWindows = FALSE)               : patience;
            patience > 0                            : patience - 1;
            (state = FREE & next(state) = WAIT)  	: 5; --K
            TRUE                                    : patience;
        esac;

    -- уменьшаем значение в очереди всех клиентов если она сдвинулась
    next(order[0]) :=
        case
            (iteratedWindows = FALSE)                                                    : order[0];
            (state = FREE & next(state) = WAIT & income = 1 & i = 0)                   : 5 - queue;
            ((state = WAIT | state = COMPLAINT) & next(state) = FREE & order[0] > 0)  	: order[0] - 1; 
            TRUE                                                                        : order[0];
        esac;

    next(order[1]) :=
        case
            (iteratedWindows = FALSE)                                                   : order[1];
            (state = FREE & next(state) = WAIT & income = 1 & i = 1)                    : 5 - queue;
            ((state = WAIT | state = COMPLAINT) & next(state) = FREE & order[1] > 0)  	: order[1] - 1; 
            TRUE                                                                        : order[1];
        esac;

    next(order[2]) :=
        case
            (iteratedWindows = FALSE)                                                   : order[2];
            (state = FREE & next(state) = WAIT & income = 1 & i = 2)                    : 5 - queue;
            ((state = WAIT | state = COMPLAINT) & next(state) = FREE & order[2] > 0)  	: order[2] - 1; 
            TRUE                                                                        : order[2];
        esac;

    next(order[3]) :=
        case
            (iteratedWindows = FALSE)                                                   : order[3];
            (state = FREE & next(state) = WAIT & income = 1 & i = 3)                    : 5 - queue;
            ((state = WAIT | state = COMPLAINT) & next(state) = FREE & order[3] > 0)  	: order[3] - 1; 
            TRUE                                                                        : order[3];
        esac;

    next(order[4]) :=
        case
            (iteratedWindows = FALSE)                                                   : order[4];
            (state = FREE & next(state) = WAIT & income = 1 & i = 4)                    : 5 - queue;
            ((state = WAIT | state = COMPLAINT) & next(state) = FREE & order[4] > 0)  	: order[4] - 1; 
            TRUE                                                                        : order[4];
        esac;


    -- количество свободных мест в очереди
	next(queue) :=
      case
        (iteratedWindows = FALSE)               : queue;        
        (state = FREE & next(state) = WAIT) 	: queue - 1; 
		(state != FREE & next(state) = FREE)  	: queue + 1; 
        TRUE					                : queue;
      esac;	

    -- количество свободных окон (увеличивается в модуле Windows, который осуществляет итерацию по массиву)
    next(freeWindows) :=
        case 
            (iteratedWindows = FALSE)                               : freeWindows;
            (next(state) = FREE & freeWindows > 0 & order[i] = 0)  	: freeWindows - 1; 
            TRUE					                                : freeWindows;
        esac;	

    -- занимаем свободное окно
    next(freeWindowIndexes[0]) :=
            case
                (iteratedWindows = FALSE)        : freeWindowIndexes[0];                        
                (freeWindowIndexes[0] != -1)     : -1;
                TRUE                             : freeWindowIndexes[0];
            esac;

    next(freeWindowIndexes[1]) :=
            case
                (iteratedWindows = FALSE)        : freeWindowIndexes[1];                        
                (freeWindowIndexes[0] = -1 & freeWindowIndexes[1] != -1)                                    : -1;
                TRUE: freeWindowIndexes[1];
            esac;

    next(freeWindowIndexes[2]) :=
            case
                (iteratedWindows = FALSE)        : freeWindowIndexes[2];                        
                (freeWindowIndexes[0] = -1 & freeWindowIndexes[1] = -1 
                                                                & freeWindowIndexes[2] != -1)               : -1;
                TRUE: freeWindowIndexes[2];
            esac;

    next(freeWindowIndexes[3]) :=
            case
                (iteratedWindows = FALSE)        : freeWindowIndexes[3];                        
                (freeWindowIndexes[0] = -1 & freeWindowIndexes[1] = -1 
                                        & freeWindowIndexes[2] = -1 & freeWindowIndexes[3] != -1)             : -1;
                TRUE: freeWindowIndexes[3];
            esac;

    next(freeWindowIndexes[4]) :=
            case
                (iteratedWindows = FALSE)        : freeWindowIndexes[4];                        
                (freeWindowIndexes[0] = -1 & freeWindowIndexes[1] = -1 
                    & freeWindowIndexes[2] = -1 & freeWindowIndexes[3] = -1 & freeWindowIndexes[4] != -1)   : -1;
                TRUE: freeWindowIndexes[4];
            esac;



MODULE Windows(freeWindows, freeWindowIndexes, iteratedWindows, serving)
    VAR
        index: 0..3-1; -- N-1
    ASSIGN
        init(index) := 0;

        next(index) := (index + 1) mod 3; -- mod N

        next(iteratedWindows) :=
            case
                index = N - 1 : TRUE;
                TRUE          : FALSE;
            esac;

        next(serving[index]) :=
            case
                serving[index] > 0  : serving[index] -1;
                TRUE                : serving[index];
            esac;

        next(freeWindows) :=
            case
                serving[index] = 0  : freeWindows + 1;
                TRUE                : freeWindows;
            esac;
        

        next(freeWindowIndexes[0]) :=
                case
                    (serving[index] = 0 & freeWindowIndexes[0] = -1)                                                : index;
                    TRUE: freeWindowIndexes[0];
                esac;

        next(freeWindowIndexes[1]) :=
                case
                    (serving[index] = 0 & freeWindowIndexes[0] >= 0 & freeWindowIndexes[1] = -1)                    : index;
                    TRUE: freeWindowIndexes[1];
                esac;

        next(freeWindowIndexes[2]) :=
                case
                    (serving[index] = 0 & freeWindowIndexes[0] >= 0 & freeWindowIndexes[1] >= 0 
                                                                    & freeWindowIndexes[2] = -1)                   : index;
                    TRUE: freeWindowIndexes[2];
                esac;

        next(freeWindowIndexes[3]) :=
                case
                    (serving[index] = 0 & freeWindowIndexes[0] >= 0 & freeWindowIndexes[1] >= 0 
                                         & freeWindowIndexes[2] >= 0 & freeWindowIndexes[3] = -1)                    : index;
                    TRUE: freeWindowIndexes[3];
                esac;

        next(freeWindowIndexes[4]) :=
                case
                    (serving[index] = 0 & freeWindowIndexes[0] >= 0 & freeWindowIndexes[1] >= 0 
                        & freeWindowIndexes[2] >= 0 & freeWindowIndexes[3] >= 0 & freeWindowIndexes[4] = -1)       : index;
                    TRUE: freeWindowIndexes[4];
                esac;
            
        -- задаем время обслуживания
        next(serving[index]) :=
                case
                    (freeWindowIndexes[0] != -1 & next(freeWindowIndexes[0]) = -1 & freeWindowIndexes[0] = index)  : 1..3;
                    (freeWindowIndexes[1] != -1 & next(freeWindowIndexes[1]) = -1 & freeWindowIndexes[1] = index)  : 1..3;
                    (freeWindowIndexes[2] != -1 & next(freeWindowIndexes[2]) = -1 & freeWindowIndexes[2] = index)  : 1..3;
                    (freeWindowIndexes[3] != -1 & next(freeWindowIndexes[3]) = -1 & freeWindowIndexes[3] = index)  : 1..3;
                    (freeWindowIndexes[4] != -1 & next(freeWindowIndexes[4]) = -1 & freeWindowIndexes[4] = index)  : 1..3;

                    TRUE                                                            : serving[index];
                esac;

        next(serving[freeWindowIndexes[1]]) :=
                case
                    (iteratedWindows = FALSE)                                       : serving[freeWindowIndexes[1]];  
                    (freeWindowIndexes[1] != -1 & next(freeWindowIndexes[1]) = -1)  : 1..3;
                    TRUE                                                            : serving[freeWindowIndexes[1]];
                esac;

        next(serving[freeWindowIndexes[2]]) :=
                case
                    (iteratedWindows = FALSE)                                       : serving[freeWindowIndexes[2]];  
                    (freeWindowIndexes[2] != -1 & next(freeWindowIndexes[2]) = -1)  : 1..3;
                    TRUE                                                            : serving[freeWindowIndexes[2]];
                esac;

        next(serving[freeWindowIndexes[3]]) :=
                case
                    (iteratedWindows = FALSE)                                       : serving[freeWindowIndexes[3]];  
                    (freeWindowIndexes[3] != -1 & next(freeWindowIndexes[3]) = -1)  : 1..3;
                    TRUE                                                            : serving[freeWindowIndexes[3]];
                esac;

        next(serving[freeWindowIndexes[4]]) :=
                case
                    (iteratedWindows = FALSE)                                        : serving[freeWindowIndexes[4]];  
                    (freeWindowIndexes[4] != -1 & next(freeWindowIndexes[4]) = -1)   : 1..3;
                    TRUE                                                             : serving[freeWindowIndexes[4]];
                esac;